[model_info]
node_name = prostate_cnn
    ; node_name : str 
    ;     node for which model is to be learned
network_class = segmentation_network
    ; Network network class: str
    ;     TODO: default as segmentation_network? 
    ;     or find the right one from node?
reader_class = simple_image_reader
    ; Image reader class: str
    ;     If you are not specifying the image reader class,
    ;     it will choose the right reader based on
    ;     the file format. If you set the specifit image reader
    ;     it will follow the choice.
sampler_class = simple_uniform_sampler
    ; Sampler class: str
    ;     If you are not specifying the sapler class,
    ;     it will choose the uniform ransom sampling sampler as a default.
    ;     If you set the sampler with a specific sampling weight, 
    ;     it will follow the choice.
augmentator_class = basic_augmentator
    ; Augmentator class: str
    ;     If you are not specifying the sapler class,
    ;     it will choose the uniform ransom sampling sampler as a default.
    ;     If you set the sampler with a specific sampling weight, 
    ;     it will follow the choice.
architecture = unet_3d_arb
    ; CNN architecture descriptor: str
    ;     Name of the architecture
    ;     should be included in cnn_arch.py
optimizer   = adam
    ; Optimizer name: str
    ;     Optimizers supported by Keras
lr          = 0.01
    ; learning rate
decay       = 0.001
    ; decay rate of learning rate
beta_1      = 0.9
    ;  exponential decay rate for the 1st moment estimates: https://keras.io/api/optimizers/adam/
    
    ; lr = lr * (1.-decay)
    ; Later, we can consider to add exponential decay or other things in here..
loss        = dice
    ; Name of the loss functions: str
    ;     should be inluded in cnn_loss_and_metrics.py
metrics     = precision, recall, dice
    ; Name of the metrics: str
    ;     should be inluded in cnn_loss_and_metrics.py
    ;     can be append by `,`
intensity_norm  = mean0std1
    ; intensity_normalization methods: str
    ;     descriptor(s) that defines what intensity normalization(s) to use
    ;     can be append by `,`
    ;     Example:
    ;     intensity_norm  = mean0std1, mean0std1
augmentation = 
    ; augmentation methods: str
    ;     descriptor(s) that defines what augmentation(s) to use
    ;     can be append by `,`
    ;     Example:
    ;     augmentation  = yaxisflipping,randomzoom_0.5_0.9,randomrotation_5
; bounding_box = 0, 0, 0, 511, 511, 46
;     ; bounding box coordindate for cropping CNN input image: tuple of int
;     ;     (top_left_x, top_left_y, top_left_z,
;     ;     bottom_right_x, bottom_right_y, bottom_right_z)
;     ;     miu will write this one
; img_shape = 320, 320, 22
;     ; target shape for analysing input image: tuple of int
;     ;     (d_x, d_y, d_z)
;     ;     If the experiment is for two-dimensional image input, 
;     ;     please put None value in d_z. For example, please set
;     ;     img_shape = (256, 256, None)
;     ;     miu will write this one
pass_previous_node = false
    ; whether to pass calculating previous node roi: bool

[path_info]
model_file = /scratch/youngwon/miu_examples/public_PROMISE12/experiments/miu_model_prostate/prostate_model
    ; model_path : str
    ;     path of miu model file
    ;     A text file listing the nodes of the segmentation model,
image_file = /scratch/youngwon/miu_examples/public_PROMISE12/data_source/training_all/Case00.mhd
    ; image_file: str
    ;     (list of) path of the image files
    ;     A text file containing a list of DICOM files comprising a series. 
    ;     The full path is listed, one file per line.
working_directory = /scratch/youngwon/miu_examples/public_PROMISE12/experiments/experiment_miu
    ; working_directory: str
    ;     working path for training files
    ;     Directory where working files (e.g., EDM, CNN) are read from 
    ;     if they exist (were computed previously) or are written otherwise.
output_directory = /scratch/youngwon/miu_examples/public_PROMISE12/experiments/experiment_miu/output
    ; output_directory: str
    ;     Directory where outputs (blackboard, ROIs, etc) will be stored
warm_start_model = 
    ; pre-trained model weight path: str
    ;     Ignored for prediction
    ;     Path of pre-trained weight for warm-start training
    ;     available format: .hd5, .h5
    ;     If empty, assume there is no pre-trained weight,
    ;     and start to train the model from scratch
; weights_file = /scratch/youngwon/miu_examples/public_PROMISE12/experiments/miu_model_prostate/prostate_cnn_weights_NA.hd5
;     ; weights_file: str
;     ;     miu will write this one
user_resource_directory = 
    ; user_resource_directory: str
    ;      Directory where the resource configuration files for CNN nodes are stored. 
    ;      If this is not specified, working_directory will be used instead.    
condor_job_directory = 
    ; condor_job_directory : str
    ;   path of directory to store any condor-related files to run the job or not. This 
    ;   argument only come from GA, not from user input for MIU. If `None`, it will not 
    ;   use the condor to submit the job, but run the miu locally.

[search_area_attention_info]
attention_type = none
    ; type of attention: str
    ;     supported type: hard, soft, none
    ;       hard: hard (constant) attention. 
    ;           The serach area will be used as a constant attention area.
    ;       soft: soft (trainable) attention.
    ;           Attention weight is trainable, and attention area can be changed from search area.
    ;           The attention weight will be constrained to be as same as the search area.
    ;       none: no attention will be added to the input layer
attention_initial = none
    ; path of ndarray
    ;     For soft attention, initial weight can be set by attention_initial.
    ;     If none, "one" will be used as initial weight.
intensity_value = none
    ; the intensity (weighting amount) value of whole attention: float (range within [0,1])
    ;     if intensity_trainable = True, this will be the initial value of the intentisy parameter
    ;     if none, random initial value will be used for trainable intensity_value. 
    ;     none initial value for constant intensity_value will raise error.
intensity_trainable = false
    ; whether the intensity of attention is trainable or not (constant)
    ;     if false, intensity_value will be constidered as a constant hyper-parameter
    ;     if true, intensity_value will be trained. The input intensity_value will be set as a initial.
bounding_box = false
    ; whether to use bounding box from search area together or not.
    ;   if false, it will not using bounding box.
    ;   if true, it will using bounding box together with search area attention.

[chromosome_info]
weights_tag = NA
    ; weights_tag : str
    ;     chromosome bit tag for CNN model weights (.hd5 file)
input_tag = NA
    ; input_tag : str
    ;     chromosome bit tag for CNN training input files (.hdf5 files)

[training_info]
epochs          = 50
batch_size      = 32
validation_size = 0.2
sequential = false
replace = false
do_augment = false

[callbacks_info]
callbacks       = csvlogger, modelcheckpoint
monitor         = val_dice
callback_mode   = max
patience        = 1
min_delta       = 1e-4
lr_factor       = 0.5
lr_patience     = 10

[validation_info]
batch_size = 4
sequential = false
replace = false
do_augment = false

[test_info]
batch_size = 4
mode = evaluation
sequential = False
replace = false
augment = false

[tensorboard_info]
simple_tb = false
    ; simple_tb: bool
    ;     if True, lighter tensorbaord will be employed
; tensorboard_directory = ../tb_logs/promise12_regacy_std_t2_only
;     ; tensorboard_directory : str
;     ;     Directory where tensorboard logging will be stored
histogram_frequency  = 1
    ; histogram_frequency : int
    ;     Frequency of writing histogram per epoch
write_graph     = False
    ; write_graph : bool
    ;     whether to write the whole tensorflow graph
write_grads     = False
    ; write_grads : bool
    ;     whether to write the histogram of the gradient
write_images    = True
    ; write_images : bool
    ;     whether to write the visualization of input, output and prediction images
write_weights_histogram = False
    ; write_weights_histogram : bool
    ;     whether to write the weights histogram
    ;     TODO: check
write_weights_images = False
    ; write_weights_images : bool
    ;     whether to write the visualization of the weights
    ;     TODO: check
embeddings_freq = 0
    ; embeddings_freq : int
    ;     Frequency of writing the embedding
embeddings_layer_names = 
    ; embeddings_layer_names : str
    ;     The name of the layer which of the activation will be embedded
zcut = 0,0
    ; zcut : int, int
    ;     number of slices omitted in the visualization of images
    ;     e.g., 3,3 means upper 3 slides and lower 3 slides will
    ;     be omitted in the tensorboard visualization
    ;     to save the memory and cpu load for tensorboard
downsampling_scale = 0.25
    ; downsampling_scale : float
    ;     scale of downsample images
    ;     to save the memory and cpu load for tensorboard

[png_info]
skip_png = false
    ; skip_png : bool
    ;   whether to save png or not

[switch_from_miu_info]
skip_png = false
    ; skip_png : bool
    ;   whether to save png or not
skip_tb = false
    ; skip_tb : bool
    ;   whether to save tensorboard log or not
skip_png_training = false
    ; skip_png_training : bool
    ;   whether to save png or not
predict_cpu_only = false
    ; predict_cpu_only : bool
    ;   Whether to use the default resource (single-core CPU) 
    ;   for predictions.  If ``-p`` is used, it will predict
    ;   using only the default resource. 
use_ph_area = false
    ; use_ph_area : bool
    ;   Whether to use the subregion for histogram-baed normalization preprocessings
