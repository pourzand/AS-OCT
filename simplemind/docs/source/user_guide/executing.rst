.. highlight:: shell

************************************************
Executing SM Model
************************************************

To run the **SM runner**, you need to prepare some prerequisities.

When you run the SM model,

* If you want to predict the CNN nodes within the SM model with pre-trained CNN weights 
  without any CNN node training, see **Prerequisites** below.
* If you want to train some of CNN nodes before prediction, see `Training CNN Nodes`_ section.


Prerequisites
============================================

If you want to run the SM model without any CNN node training, you need:

1. **SM model** to calculate the ROI from input image,

2. **Image file** for input,
   
..  ..  warning:: **Working directory** requirement will be removed later. At the next update, You can use either **resource directory** or **Working directory** for GPU calculation. For CPU calculation, you will not need to set any of those.

..    .. deprecated:: X 
..        This requirement will be removed later. At the next update, You can use either **resource directory** or **Working directory** for GPU calculation. For CPU calculation, you will not need to set any of those.

SM Model
------------------------------------------------

We first need a SM model to run.
Let's assume your example SM model file ``example_model``:

.. code-block:: console
    
    Model: example_model
    1
    node_5
    cnn_node_4
    node_3
    cnn_node_2
    node_1
    End: example_model;

is placed under the directory ``\your\SM\model\directory``.
We need the corresponding SM nodes and the pre-trained weight files 
(``cnn_node_2_weight_NA.hd5``, ``cnn_node_4_weight_NA.hd5``) under this directory.
See `SM Model`_ section for the detailed explanations.

Image File
---------------

This is an input image file to calculate the ROI. SM supports various 2D / 3D image input format.

======= =====================  ====================================================================================================
Format  Extension              Explanation
======= =====================  ====================================================================================================
Seri    ``.seri``              In-house image format (2D/ 3D). A text file containing a list of any supported format image files comprising a series. 
                               The full path is listed, one file per line, 
                               e.g., ``/scratch/mbrown/CXR/1.2.276.0.7230010.3.1.3.898003985.12164.1524075050.761_0.seri``
DICOM   ``.dcm``               Support DICOM (2D)
NIfTI   ``.nii``, ``.nii.gz``  Support NIfTI (2D / 3D)
MHD     ``.mhd``               Support MHD (2D / 3D)
PNG     ``.png``               Support PNG (2D)
======= =====================  ====================================================================================================

.. todo:: Multi-channel image input support needs some additional development (including the discussion about ``mseri`` format).
.. todo:: discussion-ROI file as an input (@youngwonchoi, @gmelendezcorres)

Call SM runner
============================================
..  (Locally)

1. Prepare the prerequisities. For example, you have
   
   .. code-block:: console

       - SM_model_dir
         ㄴ{example_model}
         ㄴ{node_1}
         ㄴ{cnn_node_2}
         ㄴ{cnn_node_2}_weights_NA.hd5
         ㄴ{node_3}
         ㄴ{cnn_node_4}
         ㄴ{cnn_node_4}_weights_NA.hd5
         ㄴ{node_5}
       - Image_file

2. Run docker with the cmd:
   
   .. code-block:: bash

       docker run -it --rm -v $PWD:/workdir -w /workdir \
       --name executing_SM sm_release:latest bash


   .. attention:: You should need to mount the volume that your SM model, image files and other prerequisities to access them inside the docker container. 
     For example, you can add the option ``-v /scratch:/scratch`` to access ``/scratch`` inside your docker container.

     .. code-block:: bash
       :emphasize-lines: 4

       docker run -it --rm -v $PWD:/workdir -w /workdir \
       -v /scratch:/scratch \
       --name executing_SM sm_release:latest bash
   

3. Run SM runner in python:
   
   .. code-block:: python
       :emphasize-lines: 4,6

       from simplemind import sm

       image_path="/your/image/file/path"
       sm_model="/your/SM/model/file/path"
       output_dir="/your/output/directory"
       sm.runner(image_path=image_path, sm_model=sm_model, output_dir=output_dir)


   Output directory ``$output_dir`` will be generated by SM runner. This directory contains every outputs of SM runner.


   After executing SM, you will have the example output below. Highlighted lines will be generated by SM.
   
   .. code-block:: console
       :emphasize-lines: 11-26
       
       - SM_model_dir
         ㄴ{example_model}
         ㄴ{node_1}
         ㄴ{cnn_node_2}
         ㄴ{cnn_node_2}_weights_NA.hd5
         ㄴ{node_3}
         ㄴ{cnn_node_4}
         ㄴ{cnn_node_4}_weights_NA.hd5
         ㄴ{node_5}
       - Image_file
       - output_dir
         ㄴ{node_1}.roi
         ㄴ{cnn_node_2}_config.ini
         ㄴ{cnn_node_2}.roi
         ㄴ{cnn_node_2}_{normalization_1}_input_image.png
         ㄴ{cnn_node_2}_{normalization_2}_input_image.png
         ㄴ{node_3}.roi
         ㄴ{cnn_node_4}_config.ini
         ㄴ{cnn_node_4}.roi
         ㄴ{cnn_node_4}_{normalization}_input_image.png
         ㄴ{node_5}.roi
         ㄴpred.roi
         ㄴsolution_info.txt
         ㄴsource_image.txr
         ㄴfile_list.txt
         ㄴblackboard.out

   Here, ``.png`` files are optional. These are depend on 1) the option about whether to generate png (``-i``), 2) skip_png argument under cnn_node, and 3) the normalization methods for input image)

By default, SM will run through single-core CPU.
If you want to control the GPU/CPU resources, please see the next section.


(Optional) Call SM runner with GPU
============================================

We can control the resource usage by the additional SM runner argument ``user_resource_directory``. First, we need to prepare the **resouce_directory** having the resource configuration.

Resource Directory
------------------------------------

.. .. warning:: **Working Directory** requirement will be removed for execution later. At the next update, You can use either **User resource directory** or **Working directory** for GPU calculation. For CPU calculation, you will not need to set any of those.

If you have CNN nodes within your SM model, you can set the **resource_directory** to control CPU/GPU resources for calculaing CNN nodes.
This **resource_directory** requires a specific structure.

For each CNN node with the name ``{cnn_node}``, make a resource configuration file ``{cnn_node}_resource.ini`` under ``{cnn_node}_KerasModel`` under your **resource directory**.
The required format of a resource configuration file ``{cnn_node}_resource.ini`` is:

.. code-block:: ini

    [GPU]
    gpu_cores=0
        ; GPU cores to use
        ; e.g., gpu_cores=3
        ;    This option will let SM to use GPU number 3.
        ; e.g., gpu_cores=2,3
        ;    This option will let SM to use multiple GPUs with number 2 and 3.
        ; e.g., gpu_cores=
        ;    This option will limit SM not to use any GPUs.
    memory_growth=True
        ; whether the process can use un-fixed size of GPU memory 
        ; or will use fixed persentage of GPU memory for each core
        ; If false then the GPU memory will be limited by 
        ; the given memory_percentage value
    memory_limit=1024
        ; Maximum memory (in MB) to allocate on the virtual device. Currently only supported for GPUs.
        ; will be ignored if memory_growth=True

    [CPU]
    max_queue_size=10
        ; maximum number of mini-batch to queue in the CPU memory
    num_cpu_core=20
        ; number of cpu workers
    use_multiprocessing=True
        ; whether to use multiprocessing


In the example SM model file ``example_model``, we have two CNN nodes.
Then, the example of the **resource_directory** ``example_resource_dir`` can have the structure below:

.. code-block:: console

    example_resource_dir
    ㄴcnn_node_2_resource.ini
    ㄴcnn_node_4_resource.ini

.. .. hint::  See `Real Examples`_ section for reference about the configuration file example for various problems.

..  (Locally)

1. Prepare the prerequisities. For example, you have
   
   .. code-block:: console
     :emphasize-lines: 11-13
     
       - SM_model_dir
         ㄴ{example_model}
         ㄴ{node_1}
         ㄴ{cnn_node_2}
         ㄴ{cnn_node_2}_weights_NA.hd5
         ㄴ{node_3}
         ㄴ{cnn_node_4}
         ㄴ{cnn_node_4}_weights_NA.hd5
         ㄴ{node_5}
       - Image_file
       - example_resource_dir
         ㄴ{cnn_node_2}_resource.ini
         ㄴ{cnn_node_4}_resource.ini

2. Run docker with the cmd:
   
   .. code-block:: bash

       docker run -it --rm -v $PWD:/workdir -w /workdir \
       --name executing_SM sm_release:latest bash


   .. attention:: You should need to mount the volume that your SM model, image files and other prerequisities to access them inside the docker container. 
     For example, you can add the option ``-v /scratch:/scratch`` to access ``/scratch`` inside your docker container.

     .. code-block:: bash
       :emphasize-lines: 4

       docker run -it --rm -v $PWD:/workdir -w /workdir \
       -v /scratch:/scratch \
       --name executing_SM sm_release:latest bash
   
3. Run SM runner in python:
   
   .. code-block:: python
       :emphasize-lines: 4,6

       from simplemind import sm

       image_path="/your/image/file/path"
       sm_model="/your/SM/model/file/path"
       output_dir="/your/output/directory"
       user_resource_directory="/your/resource/directory"
       sm.runner(image_path=image_path, sm_model=sm_model, output_dir=output_dir,  \
                user_resource_directory=user_resource_directory)


   After executing SM, you will have the example output below. Highlighted lines will be generated by SM.
   
   .. code-block:: console
       :emphasize-lines: 14-29
       
       - SM_model_dir
         ㄴ{example_model}
         ㄴ{node_1}
         ㄴ{cnn_node_2}
         ㄴ{cnn_node_2}_weights_NA.hd5
         ㄴ{node_3}
         ㄴ{cnn_node_4}
         ㄴ{cnn_node_4}_weights_NA.hd5
         ㄴ{node_5}
       - Image_file
       - example_resource_dir
         ㄴ{cnn_node_2}_resource.ini
         ㄴ{cnn_node_4}_resource.ini
       - output_dir
         ㄴ{node_1}.roi
         ㄴ{cnn_node_2}_config.ini
         ㄴ{cnn_node_2}.roi
         ㄴ{cnn_node_2}_{normalization_1}_input_image.png
         ㄴ{cnn_node_2}_{normalization_2}_input_image.png
         ㄴ{node_3}.roi
         ㄴ{cnn_node_4}_config.ini
         ㄴ{cnn_node_4}.roi
         ㄴ{cnn_node_4}_{normalization}_input_image.png
         ㄴ{node_5}.roi
         ㄴpred.roi
         ㄴsolution_info.txt
         ㄴsource_image.txr
         ㄴfile_list.txt
         ㄴblackboard.out

.. _SM Model: ./user_guide/SM_model.rst
.. _Training CNN Nodes: ./user_guide/training.rst
.. _Real Examples: ./examples.rst
.. _Installation: ./installation.rst